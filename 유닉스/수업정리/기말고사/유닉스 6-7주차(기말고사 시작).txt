[셀의 종류와 변경]

<셀>
- 커널위에 쌓는 것이 쉘이다
- user->shell->kernal
- 사용자가 입력한 명령을 처리하고 실행 결과를 알려줌

<셀의 종류>
(1) 본 셸(sh), 콘 셸(ksh), C 셸(csh), 배시 셸(bash) 
(2) 밑 명령어를 입력하면 bin/bash이라고 나올 것

< 문자열의 출력 >
(1) echo
  - 셀의 명령과 유틸리티 모두 제공
  - 지정한 문자열 출력
(2) print
  - 셀 명령
  - 옵션이 제공되어 echo보다 편리하다

=====================================================================================
<셀 특수 문자>  -----------시험에 나옴--------------
(1) ls * : 디렉토리의 모든 파일 목록을 나열함
(2) cp */tmp : 현재 디렉토리의 모든 파일을 /tmp 디렉토리 아래로 복사함
(3) ls -F h* : 파일명이 h로 시작하는 모든 파일의 이름과 파일 종류를 출력
(4) ls *.txt : 확장자가 txt인 모든 파일을 출력한다.


(5) ls hello?.c : hello1.c와 같은 한글자인 파일을 출력한다.
(5) ls hello*.c : hello1.c와 같은 한글자이상인 파일을 출력한다.
(6) ls hello[1-9].c : hello1.c와 같은 1-9와 같은 파일을 출력한다.
(7) ls hello[a-d].c : helloa.c와 같은 a-d와 같은 파일을 출력한다.


(8) cd ~ : 홈 디렉토리로 바로 이동
(9) cd : 홈 디렉토리로 바로 이동
(10) cd.. : 상위 디렉토리로 이동
(11) cd - : 이전 작업디렉토리로 이동


<|(파이프) 는 앞에있는 명령어 결과를 오른쪽에 입력값으로 출력하는 것> 
(12) date; ls; pwd: 날짜 ls 등등 연결해서 실행된다.
(13) cat -n/etc/sercives: 612줄짜리가 나옴.
(14) cat -n/etc/sercives | more : 한페이지만 보여주는 거임! 1~18페이지 쪽만!(스페이스바 누르면 계속 출력)


(15)who : 이 시스템에 접속한 시간, 터미널, 사람을 알려줌! (1명 나밖에 없음)
(16)who | wc -l
(17)who | wc -c : 문자 세는 것


<' ' , " " 특수문자>
(18) echo $SHELL
(19) echo '$SHELL' : 문자열 값을 그대로 출력함
(20)echo "$SHELL" : 현재 셀의 종류가 화면에 출력된다.


<` 특수문자>
(21) echo "Today is" `date` : date라는 명령어를 실행(1번에 있는 점을 의미한다)


<\(역슬래쉬) 특수문자>
(22) echo \$SHELL : 특수문자를 일반 문자처럼 사용한다! (\이 그런 역할을 함)


<? 특수문자>
(1) ls -l aaa?: 임의의 한 문자 하나의 파일을 나타냄
(2) ls -l aaa[123] : aaa1.txt , aaa2.txt , aaa3.txt 파일이 있으면 해당 파일의 상세 정보를 출력


<~ 특수문자>
- cd~ 이전 작업 디렉토리로 인동한다
- cp *.c ~/C : 확장자가 c인 모든 파일을 내 홈 디렉토리 아래의 C 디렉토리로 복사한다.


<리디렉션 (re-direction) > ---시험에 나옴----
(1) > : 입출력 방향을 바꾸는 특수문자
예시 = cat > ddd.txt  
예시 = mail yhoh@kornu.ac.kr < ddd.txt : 메일을 보내라!

(2) 오류 리디렉션
-명령어를 파일로!
===================================================================================




===================================================================================
<표준 입출력장치> --시험에 나옴--
(1) 유닉스에서는 장치들을 전부 파일로 인식을 한다
(2) 표준입력(키보드가 입력), 표준출력(화면으로 나가는 것), 표준 오류
(3) stdin, stdout, stderr : 명령어의 표준입력, 표준 출력, 표준 오류!
(4) 파일로 저장한다는 것을 인지만 하고 있으면 된다.

cosole<모니터 라는 뜻> 

<변수 출력 == 환경설정을 의미한다.>
(1) 프롬포트의 설정
 - echo $PS1 : 프롬포트를 의미한다.
 - echo PS1='LINUX ]' : 프롬포트가 LINUX] 로 바뀐다 //엔터누르면 아래로 쭉 내려감!
 - PS1 = '[$PWD] ' : 경로로 프롬포트가 바뀐다! //커스터 마이징을 할수 있는 거임!
 
 - PS1 = '\E[34;1mLinux $ \e[0;0m" : 이렇게 입력하면 파란색으로 바뀐다!
 - PS1 = '\E[31;1mKIM $ \e[0;0m" : 빨간색으로 바뀌고 KIM으로 뜬다.
 
(2) 커스토마이징(customizing)
- set 치면 변수들이 나옴
- set | more 치면 변수들이 잔뜩 나옴!

==================================================================================





===================================================================================
<컨트롤 키>
(1) ctrl + c: 현재 명령 중지
(2) ctrl + d: 파일의 끝

<alias>
(1) alias ls='ls -F': ls라는 것을 ls -f가 실행되도록 해라
(2) alias ls='ls -ln': ls를 치면 ls -ln이 실행된다
(3) alias rm='rm -i' : rm을 치면 rm -i이 실행된다 //물어보는거임 rm -i는
(4) unalias rm: rm의 별칭을 삭제한다!
(5) alias 만 치면 별칭이 어떤게 선언되어 있는지 나와있음

<이전 명령어 보기> ==많이 쓰이지는 않음
(1) fc: 이전 명령보기
(2) !!: 마지막 명령 재실행하기
(3) ls 치고 !!치면 전 명령어를 실행
(4) esc + / : 명령 탐색하기

<배시 셸 프롬프트 설정>
(1) PS1=" `uname -n` $": 이렇게 하면 프롬프트가 바뀐다! (옆 이름이 바뀜)
(2) 컬러 프롬포트 설정도 위에 나와있음!
(3) \u 는 사용자이름 \h는 시스템 이름
(4) \t는 시간을 적혀있도록 한다. 
==================================================================================














































