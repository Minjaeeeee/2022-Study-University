1. 메모리 공간의 활용을 위해 필요한 변수

- 메모리 공간으 활용을 위한 도구
- 메모리 공간의 할당과 접근을 위해 필요한 도구
- 변수의 선언은 메모리 공간의 할당으로 이어진다.


2. 자료형의 종류와 구분
- 바이트 잘 사용해서 구분해서 사용하자
- 1바이트는 8비트이다!
- int a = -22억하면 안되고 long붙여도 안된다 그이유는 임시메모리가 int형이기 때문에 -22억L을 붙여야함

- float와 double의 차이는 정밀도 / 등가체 사용하여 표현한다.
- 모든 건 int함수를 통해 넘어갑니다. (임시메모리)
- 컴파일 상에서 실수형에서 오차가 존재해 3.2를 제대로 표현이 되지 않습니다.




[2.정수의 표현 방식 이해하기]
- 부호비트가 0이면 양의 정수, 1이면 음의정수 (맨 앞이다.)


[자바의 기본 자료형]
- 실수는 보통 double로 하는게 괜찮음
- 자바는 문자를 2바이트 유니코드로 표현한다.
- char에 정수값을 넣으면 그 정수에 맞는 유니코드를 찾아 문자로 반환한다,




[3.상수]
- final 예약어를 사용하면 된다.
 //절대 바꾸지를 못한다. 어떻게든 못함
- 상수를 선언할때는 모두 대문자로 사용한다.(바꾸려먼 컴파일 오류가 생긴다.)

[리터럴literals]
-자료형을 기반으로 표현이 되는 상수를 의미한다
ex) int num1 = 5 + 7;

[long형 상수 리터럴]
-상수 뒤에 L을 붙여줍니다. 자세한건 ppt참고한다.

[정수형 상수의 이진수 표현방법과 언더바 삽입]
-'0B'를 사용하여 이진수를 표현합니다.

[원하는 위치에 언더바 삽입 가능]
-언더바 붙이던 말던 상관없음

[실수형 상수 리터럴]
-F가 중요한다! 중요가 합니다!

[실수형 상수의 E표기법]
- 3.4E3 = 3.4 * 10(3) = 0.0034


[이스케이프 시퀀스] //한번보자
- 전체적으로 한번 봐볼 것!

[3-2. 형변환]
- System,out.prinln(num1 + num2) 로 할때 long형으로 가장 큰 수로 넘어갑니다.
- long형은 > int


[명시적 형 변환]
- 자동 형변환 규칙에 부합하지는 않지만 , 형변환이 필요한 상황이었으면 명시적 형 변환(강제);



[04. 연산자]









